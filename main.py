from datetime import datetime

import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sys
#from config import token
from server import *

print(sys.argv)
token = sys.argv[1]

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(token=token)
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    resolution = State()  # Super resolution mode
    first_style = State()  # Style transfer mode -- style photo
    second_style = State()  # Style transfer mode -- content photo


@dp.message_handler(commands=['start', 'help', 'menu'], state='*')
@dp.message_handler(text=['–ú–µ–Ω—é'], state='*')
async def greetings(message: types.Message, state: FSMContext):
    print(message.from_user.id)
    await state.finish()
    username = ' '.join(name for name in [message.from_user.first_name, message.from_user.last_name] if name)
    me = await bot.get_me()
    bot_text = (
        f'–ü—Ä–∏–≤–µ—Ç, {username}!\n\n'
        f'–ú–µ–Ω—è –∑–æ–≤—É—Ç {me.first_name}. –Ø —Å–ø–µ—à—É –æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —É—Å–ª—É–≥—É –∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å '
        f'–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ üåÑ\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —á–µ–º –º—ã –∑–∞–π–º–µ–º—Å—è –≤ –º–µ–Ω—é —Å–Ω–∏–∑—É'
    )
    await message.answer(bot_text, reply_markup=create_menu())


@dp.message_handler(text=['Super resolution', 'Style transfer'], state=None)
async def handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['function'] = message.text

    bot_text = ''
    if message.text == 'Super resolution':
        bot_text = (
            '–ï—Å–ª–∏ —Ç—ã –ø—Ä–∏—à–ª–µ—à—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –º–∞–ª–µ–Ω—å–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º üèô, —Ç–æ —è –µ–µ —É–≤–µ–ª–∏—á—É –≤ 4 —Ä–∞–∑–∞, –∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è'
            ' –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µüëç\n\nüîπ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –ª—É—á—à–µ –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–µ–∑ —Å–∂–∞—Ç–∏—è'
        )
        await Form.resolution.set()

    elif message.text == 'Style transfer':
        bot_text = (
            '–ï—Å–ª–∏ —Ç—ã –ø—Ä–∏—à–ª–µ—à—å –º–Ω–µ –¥–≤–µ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∏, —Ç–æ —è —Å–º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö, –ø–æ—Ö–æ–∂–µ–π –Ω–∞ –¥—Ä—É–≥—É—é '
            'üèô üëâ üåÜ\n\nüîª –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ø–æ—Ö–æ–∂ —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
        )
        await Form.first_style.set()
    await message.answer(bot_text, reply_markup=create_menu('–ú–µ–Ω—é'))


@dp.message_handler(content_types=['photo', 'document'], state=Form.resolution)
async def handler(message: types.Message):
    print(message.from_user.id, 'Super resolution')
    file_id = message.document.file_id if message.document else message.photo[-1].file_id
    image = await download_image(bot, file_id)

    name = '{}_{}{}{}_{}{}{}.jpg'.format(message.chat.id, *datetime.now().timetuple())
    bot_text = '–û—Ç–ª–∏—á–Ω–æ! üë®‚Äçüé®\n\n–ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ üöß‚öô\n–Ø –Ω–∞–ø–∏—à—É —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á—É'
    await message.answer(text=bot_text)

    image.save('./result/super_resolution/LR/{}'.format(name))
    result = await super_resolution(image)
    result.save('./result/super_resolution/SR/{}'.format(name))

    await sendback_result(message, result)
    await user_feedback(message)


@dp.message_handler(content_types=['photo', 'document'], state=Form.first_style)
async def handler(message: types.Message, state: FSMContext):
    print(message.from_user.id, 'Style transfer: style')
    file_id = message.document.file_id if message.document else message.photo[-1].file_id
    image = await download_image(bot, file_id)

    async with state.proxy() as data:
        data['photo_name'] = '{}_{}{}{}_{}{}{}.jpg'.format(message.chat.id, *datetime.now().timetuple())
        name = data['photo_name']

    image.save('./result/style_transfer/style/{}'.format(name), format='JPEG', quality='keep')

    await Form.second_style.set()
    bot_text = 'üîª –•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –º–µ–Ω—è—Ç—å, –ª—É—á—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –±–µ–∑ —Å–∂–∞—Ç–∏—è'
    await message.answer(text=bot_text)


@dp.message_handler(content_types=['photo', 'document'], state=Form.second_style)
async def handler(message: types.Message, state: FSMContext):
    print(message.from_user.id, 'Style transfer: content')
    file_id = message.document.file_id if message.document else message.photo[-1].file_id
    image = await download_image(bot, file_id)

    async with state.proxy() as data:
        name = data['photo_name']

    bot_text = '–û—Ç–ª–∏—á–Ω–æ! üë®‚Äçüé®\n\n–ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ üöß‚öô\n–Ø –Ω–∞–ø–∏—à—É —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á—É'
    await message.answer(text=bot_text)

    image.save('./result/style_transfer/content/{}'.format(name), format='JPEG', quality='keep')
    result = await style_transfer(name)
    result.save('./result/style_transfer/result/{}'.format(name), format='JPEG', quality=95)

    await sendback_result(message, result)
    await user_feedback(message)
    await Form.first_style.set()


@dp.callback_query_handler(lambda call: call.data, state='*')
async def handler(call: types.callback_query.CallbackQuery):
    print(call.from_user.id, call.data)
    bot_text = '\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑, –ø—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ. üóÉ\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏ /start'
    bot_text = call.data + bot_text
    await bot.edit_message_text(bot_text, call.from_user.id, call.message.message_id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
